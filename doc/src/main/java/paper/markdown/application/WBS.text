1:虚拟机参数
MEM_OPTS: 大堆  6G
JAVA_OPTS:
GC_OPTS: 打印GC日志
OTHER_OPTS:

项目问题： 请求的广告列表有20000个广告，每个广告处理提交给线程池，导致线程上线文切换频繁，产生大量的拒绝，超时，
    解决：8核心cpu 分成8批次提交，效率提升至30ms以内
    1：完成kafka基础类，动态绑定topic，动态线程配置，动态数据批量处理
    2：完成批量数据处理基础类的开发，实现动态批量消费，动态配置多线程消费。动态线程池配置，实现实时参数优化。
    3：完成批量，10W每秒的kafka集群消费速度，保证点击，曝光数据无积压。
    4：对于频控请求可以承受10WQPS的并发访问，同时1w个广告处理频控不超过10ms
    5：完成JVM调优，从线程池，dubbo，jvm，代码逻辑，发现分析性能问题，完成性能优化，项目性能优化，
    6:完成对接第三方SSP（百度，阿里等），利用Hyxtrix熔断器保证高可用。

广告引擎，客户端通过sdk请求广告，通过ES召回广告列表，然后按照策略进行频控，有广告位，媒体等等十几个维度进行频控配置。
单接口可以承受的QPS达到十万级别，一万广告数据处理实现10ms以内
发现压测的时候从测试提供的火焰图中发现，频繁GC导致接口耗时超过30ms，无法达到设计标准。分析JVM的6G，g1的gc处理器
调整暂停时间，调整批次处理，同事广告对象较多，加上配置，一个请求的产生的对象有十几万。

优化：配置信息在记录的时候同步存到redis，就不会每次都要循环迭代去拿读取配置，分析配置。可以减少30%的对象创建，通过牺牲存储来
优化性能。
1：原本有kafka消费12个节点，三个机房每个都去消费12个节点，导致浪费性能（redisclus会同步），优化成每个机房消费四个节点，
这样可以提高数据消费能力，减少kafka的压力，提高消费能力


DSP:流量消费方
SSp:流量提供方

完成自定义springmvc的解码器，实现springmvc对美图 uc pb协议自动解码到java对象
实现dubbo对pb协议的解码