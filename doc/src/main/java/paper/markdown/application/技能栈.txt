熟悉常用设计模式：
策略：
1：三个业务信息流，联盟，品牌 ，我们一般策略模式和抽象模板方法模式一起，一般是策略模式加+工厂模式
责任链：
1：广告召回业务中，会执行一系列的策略，每个测单独独立出来一个filter，通过责任了进行处理
2：Mybatis中的插件实现方式也是动态代理+责任链的模式实现的
就是实现同一个接口每个类有不同的实现，频控每个业务实现同一个配置解析的接口，每个业务不同的实现就是策略模式。
spirng 当中大量使用了策略模式，比如后置处理器就是使用了策略的设计模式，有的对bean  单一职责化
单例：
装饰者：1：流中new BufferedReader(new FileReader("")); 采用的就是装饰器模式文件流包装成缓存流

代理：
观察者：
适配器：
外观/门面：
工厂模式：定义接口，注入工厂类，通过实现类，判断
责任链模式：
1：mybatis中的插件，通过装饰器模式+动态代理+责任链接模式

研究过Mybatis3源码，熟悉sqlsession执行流程、熟悉一级缓存、二级缓存原理
 
研究过Spring5注解方式启动Spring的源码，熟悉Springbean生命周期、SpringAOP底层原理、
Spring事务底层原理、Spring循环依赖解决的原理，事务的隔离级别。
 
研究过SpringMVC5的源码，可手动仿真SpringMVC框架
 
研究过Springboot2的启动源码，熟悉Springboot核心设计理念，可自定义starter组件，熟悉
@SpringBootApplication底层原理

熟悉spring源码，可以对spring源码进行二次扩展

熟悉Java8新特性流式编程，comepletetable ，optional 等等。。。
熟悉线程池的优化。
1：线程池有七个参数，优化可以参考美团技术团队的文章https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html
  1.核心线程数  2：最大线程池数量  3：阻塞队列 4：拒绝策略  5：线程空闲时间  6：线程工厂  7：timeUnit

熟悉常用集合（ArrayList、LinkedList、HashMap1.7、HashMap1.8、ConcurrentHashMap1.7、
ConcurrentHashMap1.8）原理，并研究过源码 线程池源码，ThreadLoacl内存泄漏，脏数据产生得原因
 
可手写二叉树、了解红黑树旋转变色规则
 redis的集群，优化，redis的分布式锁。
熟悉多线程（通讯、锁，CAS机制）、Java内存模型，可手写Java线程池
 
熟悉Java内存结构，了解常用垃圾回收算法、垃圾回收器以及内存溢出和内存泄漏等问题
 
有阻塞队列的应用生产实践。
熟悉Zookeeper使用，了解Zookeeper工作原理，分布式锁原理、分布式集群原理、选举策略、数据最终一致性原理。
 
了解MySQL中的事务隔离级别和常见的锁（共享、排它、意向、记录、间隙、临键、行锁、表锁等）,熟悉mysql索引原理，可以对sql进行性能优化。
 
研究过Tomcat8底层源码，可在微服务架构下优化Tomcat8
 
熟悉Netty框架，了解BIO、NIO、TCP/UDP原理，了解OSI七层网络模型，了解请求粘包、拆包原因和解决方案，了解序列化机制。
 
熟悉SpringCloud框架，了解服务治理、服务注册发现、服务降级、熔断、隔离等Hystrix服务保护机制的原
理，熟悉Ribbon负载均衡、Config配置中心、Zuul网关、Swagger接口调试
 
熟悉Redis淘汰策略、事务、持久化机制、分布式锁、单线程高效、自动过期、与MySQL保持一致性等原理，redis的优化
 
熟悉Redis穿透、击穿、雪崩、集群、主从复制、哨兵选举、cluster分片、动态扩容、缩容、布隆过滤器等原理
 
熟悉常用消息队列RabbitMQ/Kafka/RocketMQ，了解其解决分布式事务，消息幂等，顺序消费，事务消息以及
常用工作方式等原理

熟读Mybatis源码，熟悉Mybatis的执行流程，插件体系，熟悉其缓存设计结构，以及对设计模式在项目中的实际应用。
熟悉常用的设计模式，责任链，动态代理模式，建造者模式，抽象类模式，观察者模式，装饰者模式，知道这些模式在项目中如何更好的应用。
熟悉PB协议，JOSN协议
熟悉项目的优化，有项目优化的经验。可以代码，jvm，网络传输，缓存，数据库，多角度优化项目。提高项目的处理效率。
熟悉kafka，redis
熟悉线程池，duobbo线程吃，jedis线程池调优，熟悉常用的缓存框架（guava,coffe）,熟悉mysql的索引原理，存储引擎，sql优化等

对spring的源码比较熟悉，熟悉bean的生命周期，设计模式，IOC，DI等spring的设计思想。
对Mybaits的源码有比较深入的研究。

可以对代码性能进行优化,熟悉jrf，FlameGraph，GC回收日志，jmap等工具发现性能瓶颈，并且对代码优化。


问题：线上kafka消费突然全部挂了，消息堆积了500w，导致告警。然后所有
处理：1：导出jmap文件分析内层告警，发现是piline写入redis 的时候发现maxWaitMillis 没有配置 默认值就是-1 导致piline一致等待连接导致堆栈溢出

优化：1：pb对象中采用int32对象，介绍请求包的大小。
2：调用改为SDK调用
3：减少对象创建

优化推送广告： 原理直接通过sql的where条件过滤，数据压力大，效率慢
            优化：每次查询出定量的广告，然后保存到list中，通过过滤链接过滤广告，直接可以使得计算在内存中进行，大大提高了效率。sql每次都可以走索引
            效率50ms查询时间缩减到10ms

优化接口超过50ms设计值： 1：jfr文件，flame graph 分析，在字符串拼接中耗时过长导致
 分析返现，每个广告都需要两个字符串拼接，用的谷歌的框架，底层用的stringbuilder效率很高，但是拼接的字符串很短，次数多，频繁的toString导致耗时严重，占用
 整个接口耗时的30%，优化：直接不拼接，list存到redis中，效率大幅度提高，耗时占不到3%，整个接口耗时40ms左右，满足设计需求。


 问题：每个服务自己都创建连接池操作redis，流量高峰期导致redis连接太多，大量查询超时
 优化：查询redis 单独创建一个服务独立出来，更好控制redis连接数。

就是实现同一个接口每个类有不同的实现，频控每个业务实现同一个配置解析的接口，每个业务不同的实现就是策略模式。
spirng 当中大量使用了策略模式，比如后置处理器就是使用了策略的设计模式，有的对bean  单一职责化

熟练使用coffine guava等本地缓存框架

熟悉常用的性能分析工具，jfr，火焰图，jmap，btrace(线上问题排查，字节码插桩工具)



一次优化JVM ：频繁yongGC，因为设置了最长的gc时间，每次gc不完。  多个实例部署到一个机器上

MDC做一个onlinedebug


